<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects | Remy Chaput</title><link>/project/</link><atom:link href="/project/index.xml" rel="self" type="application/rss+xml"/><description>Projects</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 06 Aug 2021 00:00:00 +0000</lastBuildDate><image><url>/media/icon_hu62f16b166d299cea1530d18dc13c60c6_452_512x512_fill_lanczos_center_2.png</url><title>Projects</title><link>/project/</link></image><item><title>knitrdrawio</title><link>/project/knitrdrawio/</link><pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate><guid>/project/knitrdrawio/</guid><description>&lt;p>&lt;strong>knitrdrawio&lt;/strong> is a publicly-available R package that brings a new engine
to the &lt;a href="https://yihui.org/knitr/" target="_blank" rel="noopener">knitr&lt;/a> library, to automatically include &lt;a href="https://diagrams.net" target="_blank" rel="noopener">draw.io&lt;/a> diagrams in R
Markdown documents (Rmd).&lt;/p>
&lt;p>Rmd documents are powerful documents that increase reproducibility in
research by integrating code chunks which are run when the document is
processed by the &lt;a href="https://yihui.org/knitr/" target="_blank" rel="noopener">knitr&lt;/a> library and exported (e.g., to PDF or HTML webpages).
Typical usages of such code chunks include, for example, the plotting
of figures based on experiments data.&lt;/p>
&lt;p>However, no tool was easily accessible to include diagram images,
especially those created by a third-party software, such as &lt;a href="https://diagrams.net" target="_blank" rel="noopener">draw.io&lt;/a>.&lt;/p>
&lt;p>Before &lt;strong>knitrdrawio&lt;/strong>, the alternative would have been to manually export
the diagram from &lt;a href="https://diagrams.net" target="_blank" rel="noopener">draw.io&lt;/a> as an image (e.g., PNG, JPG, or PDF), and then
to manually include it in the R Markdown document, as one would do with
any Markdown document (&lt;code>[Image name](/path/to/image.png)&lt;/code>).&lt;/p>
&lt;p>This workflow is rather cumbersome and does not support the stakes of
reproducibility, open science and reusability.
Indeed, the export process, and its parameters, are separated from
the rest of the document. One has to remember how to export the diagrams,
from which source files, which are the correct versions, etc.
Moreover, many scientists only include the exported images in their
Version Control System (VCS), which makes it more difficult to modify
the diagram later on (&amp;ldquo;where is that source file?!&amp;quot;).&lt;/p>
&lt;p>&lt;strong>knitrdrawio&lt;/strong> was built to solve this, by extending the &lt;a href="https://yihui.org/knitr/" target="_blank" rel="noopener">knitr&lt;/a> library
with a new chunk &lt;em>engine&lt;/em>, which allows to seamlessly export and include
&lt;a href="https://diagrams.net" target="_blank" rel="noopener">draw.io&lt;/a> diagrams.&lt;/p>
&lt;p>Automatically exporting and including a diagram is as simple as writing:&lt;/p>
&lt;pre>&lt;code>```{drawio my-super-diag1, src=&amp;quot;diag1.drawio&amp;quot;}
```
&lt;/code>&lt;/pre>
&lt;p>This code chunk is replaced by the actual image, automatically exported
from the &lt;code>diag1.drawio&lt;/code> diagram file, during the &lt;em>knitting&lt;/em> process.&lt;/p>
&lt;p>Of course, parameters can be added to control the export process:&lt;/p>
&lt;pre>&lt;code>```{drawio my-super-diag2, src=&amp;quot;diag2.drawio&amp;quot;, border=5, crop=FALSE, page.index=4}
```
&lt;/code>&lt;/pre>
&lt;p>Notice how the parameters are directly written in the document itself:
any people trying to re-create your document (including future you!) will
export the diagram exactly as you intended.&lt;/p>
&lt;p>As a bonus, &lt;strong>knitrdrawio&lt;/strong> builds upon &lt;a href="https://yihui.org/knitr/" target="_blank" rel="noopener">knitr&lt;/a>&amp;rsquo;s caching mechanism
to avoid re-executing chunks if unnecessary. This means that, if
you chose to enable cache, the chunk will be executed only once, as long
as neither the parameters nor the diagram source file are changed.&lt;/p>
&lt;p>See the &lt;a href="https://github.com/rchaput/knitrdrawio" target="_blank" rel="noopener">GitHub&lt;/a> page for more
details, or start using &lt;strong>knitrdrawio&lt;/strong> in your Rmd documents right away:&lt;/p>
&lt;pre>&lt;code>```{r setup}
install.packages(&amp;quot;remotes&amp;quot;)
remotes::install_github(&amp;quot;rchaput/knitrdrawio&amp;quot;)
library(knitrdrawio)
```
&lt;/code>&lt;/pre></description></item><item><title>Py3status Random Wallpaper</title><link>/project/py3status-wallpaper/</link><pubDate>Tue, 04 Aug 2020 22:06:02 +0200</pubDate><guid>/project/py3status-wallpaper/</guid><description>&lt;p>&lt;a href="https://github.com/rchaput/py3status-random-wallpaper/" title="Pystatus-Random-Wallpaper" target="_blank" rel="noopener">Py3status Random Wallpaper&lt;/a> is a module for &lt;a href="https://github.com/ultrabug/py3status/" target="_blank" rel="noopener">Py3status&lt;/a> (which is itself a replacement for the defaul i3status in i3bar) that allows you to
change your wallpaper. Each time the module is loaded (for example, when the i3bar is started), it will
pick a random wallpaper amongst your library. You can also directly click on the module to change the wallpaper.&lt;/p>
&lt;p>This module was made with high configurability in mind, and you can tweak several parameters, such as:&lt;/p>
&lt;ul>
&lt;li>the folders which will be scanned for wallpapers&lt;/li>
&lt;li>the buttons used to trigger a new change&lt;/li>
&lt;li>the command used to set the wallpaper (by default, uses &lt;a href="https://feh.finalrewind.org/" target="_blank" rel="noopener">feh&lt;/a>)&lt;/li>
&lt;li>an optional list of ignored files&lt;/li>
&lt;li>and others&amp;hellip;&lt;/li>
&lt;/ul></description></item><item><title>XDG-Prefs</title><link>/project/xdgprefs/</link><pubDate>Tue, 04 Aug 2020 21:36:46 +0200</pubDate><guid>/project/xdgprefs/</guid><description>&lt;p>&lt;a href="https://github.com/rchaput/xdg-prefs/" target="_blank" rel="noopener">XDG-Prefs&lt;/a> is an Open-Source tool to manage your default applications on GNU/Linux, with a simple but efficient GUI.&lt;/p>
&lt;p>On GNU/Linux systems, each file has a type, named the &lt;a href="https://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec/" target="_blank" rel="noopener">MIME Type&lt;/a> (or Media Type), based on the
&lt;a href="https://www.freedesktop.org/wiki/Specifications/mime-apps-spec/" target="_blank" rel="noopener">XDG Specifications&lt;/a> by &lt;a href="https://www.freedesktop.org/wiki/" target="_blank" rel="noopener">Freedesktop&lt;/a>. Your system maintains a database that specifies the
default application you want to use for each MIME Type ; this database is available through the official
&lt;code>xdg-mime&lt;/code> tool, but the command-line interface is not suited for easy management (you must remember the
exact name of the MIME Type for example).&lt;/p>
&lt;p>&lt;a href="https://github.com/rchaput/xdg-prefs/" target="_blank" rel="noopener">XDG-Prefs&lt;/a> offers a simple GUI that allows you to view and modify this database easily ; it
is built upon the same standard specifications, meaning that your preferences will be recognized by
all other applications (typically, when you double-click on a file in your File Explorer).&lt;/p>
&lt;p>Such a tool is commonly found in Desktop Environments, such as &lt;em>Gnome&lt;/em> or &lt;em>KDE&lt;/em>, but not in Window Managers,
such as &lt;em>i3wm&lt;/em>. &lt;a href="https://github.com/rchaput/xdg-prefs/" target="_blank" rel="noopener">XDG-Prefs&lt;/a> is desktop-agnostic, meaning that you can use it on Gnome, KDE, or even i3.&lt;/p></description></item></channel></rss>