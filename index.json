[{"authors":["rchaput"],"categories":null,"content":"I am a PhD Student in Artificial Intelligence, currently working at the LIRIS lab (CNRS - UMR5205), in the Multi-Agent System (SMA) team. My thesis focuses on learning ethical behaviors for Artificial Agents through Reinforcement Learning.\nMy research interests also include Explainable AI, and human-centered AI (such as Responsible AI, AI4People, etc.).\n","date":1596571562,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1596571562,"objectID":"277cef776f4c8108a2e625b7319a9d13","permalink":"/author/remy-chaput/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/remy-chaput/","section":"authors","summary":"I am a PhD Student in Artificial Intelligence, currently working at the LIRIS lab (CNRS - UMR5205), in the Multi-Agent System (SMA) team. My thesis focuses on learning ethical behaviors for Artificial Agents through Reinforcement Learning.","tags":null,"title":"Remy Chaput","type":"authors"},{"authors":null,"categories":null,"content":"Code UE : UE-INF1092M / M1IF06\nQuelques documents nécessaires ou utiles dans le cadre du cours de Bases de l\u0026rsquo;Intelligence Artificielle (1ère année de Master Informatique).\nSite du cours : https://perso.liris.cnrs.fr/marie.lefevre/enseignement-BIA.html\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"ce75aa7ec68b5715cc4129fee0c5ce3a","permalink":"/teaching/bia/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/teaching/bia/","section":"teaching","summary":"Chargé de TD/TP en M1IF06 BIA (Master 1ère année [UE-INF1092M]).","tags":null,"title":"Bases de l'Intelligence Artificielle","type":"docs"},{"authors":null,"categories":null,"content":"Code UE : UE-INF3007L / LIFAP7\nQuelques documents nécessaires ou utiles dans le cadre du cours de Programmation Orientée Objet (3ème année de Licence Informatique).\n","date":1597968000,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1597968000,"objectID":"037676bf5d37d3158548ab1b4d4b2d36","permalink":"/teaching/poo/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/teaching/poo/","section":"teaching","summary":"Chargé de TD/TP en LIFAP7 POO (Licence 3ème année [UE-INF3007L]).","tags":null,"title":"Programmation Orientée Objet","type":"docs"},{"authors":null,"categories":null,"content":"Ce document explique comment installer un environnement de développement Java, grâce à l\u0026rsquo;utilitaire SDKMAN. Cela sera utile aux étudiants qui s\u0026rsquo;intéressent au développement d\u0026rsquo;applications Java (au-delà du cadre du cours de POO).\nSDKMAN est facile à installer sur Linux et Mac OSX, mais sur Windows il nécessite d\u0026rsquo;utiliser WSL ou Cygwin.\nL\u0026rsquo;autre option est une installation \u0026ldquo;traditionnelle\u0026rdquo; en passant par le gestionnaire de paquets (apt, pacman, rpm, etc.) et sera suffisante dans le cadre de ce cours, mais n\u0026rsquo;est pas recommandée (voir la section \u0026ldquo;Qu\u0026rsquo;est-ce que SDKMAN ?\u0026quot;).\nQu\u0026rsquo;est-ce que SDKMAN ? SDKMAN est un outil conçu pour faciliter l\u0026rsquo;installation d\u0026rsquo;une ou plusieurs versions de Java sous Linux. Il est particulièrement utile lorsque l\u0026rsquo;on a besoin de conserver sur son ordinateur différentes versions de Java (par exemple, un projet peut avoir besoin du JDK8 tandis qu\u0026rsquo;un autre utilisera le JDK13).\n JDK8 fait référence au Java Development Kit (c\u0026rsquo;est-à-dire l\u0026rsquo;ensemble des fichiers nécessaires pour exécuter et développer une application en langage Java), précisément avec la version 8. À ce jour, les versions de Java disponibles sont numerotées de 6 a 16.\nRemarque : les anciennes versions de Java étaient versionnées selon le format 1.x (par exemple, 1.6). 1.6 est donc équivalent à JDK6. Ce format a été abandonné depuis longtemps et il vaut mieux utiliser JDKx.\n  En résumé, SDKMAN permet de disposer de plusieurs versions du JDK (8, 9, 12, 13, \u0026hellip;), tandis que l\u0026rsquo;installation par le gestionnaire de paquets ne permet d\u0026rsquo;installer qu\u0026rsquo;une seule version (tous les paquets sont mutuellement en conflit).\n SDKMAN permet également de télécharger des outils qui font partie de l\u0026rsquo;écosystème Java (par exemple Maven ou Gradle), ainsi que des environnements de développement pour les langages dits \u0026ldquo;de la JVM\u0026rdquo; (Scala, Ceylon, Kotlin, etc.), c\u0026rsquo;est-à-dire qui utilisent la Java Virtual Machine, et sont donc plus ou moins liés à Java. L\u0026rsquo;écosystème Java ne sera pas abordé durant ce cours, mais est en vogue dans le monde de l\u0026rsquo;entreprise, il est donc bon pour vous de pouvoir télécharger les outils facilement !   Installation de SDKMAN Les instructions pour l\u0026rsquo;installer de SDKMAN se trouvent sur le site officielle, à la page suivante : https://sdkman.io/install.\nUn résumé simplifié de ces instructions :\nTélécharger le script d'installation et l'exécuter immédiatement $ curl -s \u0026quot;https://get.sdkman.io\u0026quot; | bash Une fois l'installation terminée, lancer le script d'initialisation $ source \u0026quot;${HOME}/.sdkman/bin/sdkman-init.sh\u0026quot; Vous avez maintenant accès à sdkman ! Vérifions que cela fonctionne $ sdk version  Ces étapes ne sont à effectuer qu\u0026rsquo;une seule fois (pour installer SDKMAN sur votre machine). Vous avez maintenant accès à SDKMAN via la commande sdk. sdk help affichera la liste des sous-commandes disponibles.\nInstallation de Java Utilisez sdk list java pour afficher l\u0026rsquo;ensemble des versions de Java qui peuvent être téléchargées. Voici ce que cela donne sur ma machine (affichage tronqué) :\n$ sdk list java ================================================================================ Available Java Versions ================================================================================ Vendor | Use | Version | Dist | Status | Identifier -------------------------------------------------------------------------------- AdoptOpenJDK | | 14.0.2.j9 | adpt | | 14.0.2.j9-adpt | | 14.0.2.hs | adpt | | 14.0.2.hs-adpt (...) BellSoft | | 14.0.2.fx | librca | | 14.0.2.fx-librca | | 14.0.2 | librca | | 14.0.2-librca | | 13.0.2.fx | librca | | 13.0.2.fx-librca (...) Java.net | | 16.ea.8 | open | | 16.ea.8-open | | 15.ea.34 | open | | 15.ea.34-open | | 14.0.2 | open | | 14.0.2-open (...)  Il existe de nombreux \u0026ldquo;candidats\u0026rdquo; (dans le langage de SDKMAN) pour Java ; ils se répartissent selon le distributeur (Vendor) et la version.\nQuel Vendor choisir ? Il existe plusieurs implémentations du JDK (voir https://sdkman.io/jdks pour leurs différences) ; j\u0026rsquo;en recommande deux en particulier :\n Java.net est l\u0026rsquo;implémentation officielle du JDK ; Bellsoft (Liberica) est issue d\u0026rsquo;une initiative 100% Open-Source et qui a la bonne idée d\u0026rsquo;intégrer JavaFX (une bibliothèque graphique pour concevoir des applications avec GUI). Sans cela, il faut installer JavaFX à part.  Quelle Version choisir ? De manière générale, il est préférable d\u0026rsquo;utiliser une version récente pour tout outil, bibliothèque, etc. Attention toutefois, les versions 15 et 16 sont (au moment de la rédaction) en Early Access, c\u0026rsquo;est-à-dire que le standard n\u0026rsquo;est pas fixé et est susceptible de changer (il n\u0026rsquo;est pas stable).\nJe conseille donc de choisir le JDK13 ou 14.\n le JDK9 a introduit un changement majeur (les modules) qui font que beaucoup d\u0026rsquo;applications conçues avec Java 8 (ou inférieur) ne fonctionnent plus sous Java 9 ! Je recommande donc d\u0026rsquo;installer également un JDK8, cela vous sera utile pour certains \u0026ldquo;vieux\u0026rdquo; programmes. L\u0026rsquo;avantage de SDKMAN est que vous pouvez définir le JDK13 en version par défaut, et utiliser avec sdk use le JDK8 quand vous en aurez besoin.   Résumé : quel candidat choisir ? Je choisis d\u0026rsquo;installer le JDK13, avec JavaFX intégré ; le candidat correspondant (selon le tableau) est donc 13.0.2.fx-librca (notez le 13 en début, le .fx qui indique JavaFX et -librca pour l\u0026rsquo;implémentation de Bellsoft). La commande pour installer ce candidat est sdk install java 13.0.2.fx-librca.\n S\u0026rsquo;il s\u0026rsquo;agit de votre premier JDK installé, SDKMAN le définit comme JDK par défaut (c\u0026rsquo;est-à-dire que les variables d\u0026rsquo;environnement JAVA_HOME et PATH pointent sur le dossier de ce JDK). Toutes les applications Java utiliseront ce JDK (à moins que vous n\u0026rsquo;indiquiez manuellement un autre JDK). De plus, la commande java (ainsi que javac, etc.) seront celles fournies par ce JDK.\nEn revanche, si vous téléchargez plus d\u0026rsquo;un JDK, SDKMAN vous demandera si vous souhaitez le mettre en JDK par défaut. Je vous conseille de garder le JDK13 en version par défaut (il est suffisamment récent pour faire tourner la majorité des programmes).\n  Où est mon JDK ? Il peut vous être nécessaire de connaître l\u0026rsquo;emplacement où est installé le JDK, notamment lors du paramétrage de votre IDE (car celui-ci vous demandera très certainement d\u0026rsquo;indiquer quel JDK utiliser).\nHeureusement, SDKMAN rend cela très facile (plus que de dézipper une archive et d\u0026rsquo;oublier dans quel dossier) : tout est situé dans le dossier ${HOME}/.sdkman (c\u0026rsquo;est-à-dire le dossier caché .sdkman dans votre répertoire personnel). En particulier, les candidats sont installés dans ${HOME}/.sdkman/candidates/. Votre version par défaut du JDK se trouve donc à l\u0026rsquo;emplacement suivant : ${HOME}/.sdkman/candidates/java/current/bin.\n La commande which java permet de connaître l\u0026rsquo;emplacement de l\u0026rsquo;exécutable java ; elle devrait retourner le même chemin (cela montre que votre JDK est bien configuré).   Paramétrage de l\u0026rsquo;IDE Avec IntelliJ IDEA Lors de la création d\u0026rsquo;un projet, IntelliJ demande quel SDK utiliser ; en déroulant la liste, sélectionner Add JDK\u0026hellip;.\nSinon, cliquer sur File \u0026gt; Project Structure (ou Ctrl+Alt+Shift+S), puis dans l\u0026rsquo;onglet SDKs cliquer sur l\u0026rsquo;icône +, Add JDK\u0026hellip;.\n","date":1596326400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596326400,"objectID":"5351d86728de347f00949a658b58ac7d","permalink":"/teaching/poo/01_sdkman/","publishdate":"2020-08-02T00:00:00Z","relpermalink":"/teaching/poo/01_sdkman/","section":"teaching","summary":"Apprendre a utiliser l'outil SDKMAN pour télécharger, installer et utiliser en parallèle sur la même machine de multiples versions de Java.","tags":null,"title":"Installer Java avec SDKMAN","type":"docs"},{"authors":null,"categories":null,"content":"Ce document explique le problème du null en Java ainsi que quelques solutions pour pallier à ce problème, telle que l\u0026rsquo;utilisation des Optional.\nNull et les NullPointerException En langage Java, toute référence (des variables, des attributs de classe, des paramètres de méthode) de type objet (donc une classe) peut valoir null : Cette valeur spéciale signifie qu\u0026rsquo;il n\u0026rsquo;y a pas de valeur (c\u0026rsquo;est l\u0026rsquo;équivalent du pointeur nul ou 0 en langage C / C++).\nSi vous essayez d\u0026rsquo;accéder quand même à cette référence (par appel de méthode dessus, ou en accédant à un attribut de la classe), Java ne pourra pas effectuer ce qui est demandé (car l\u0026rsquo;objet n\u0026rsquo;existe pas !) et vous enverra une erreur (ce qu\u0026rsquo;on appelle \u0026ldquo;lever une exception\u0026rdquo;). Cette exception, dans ce cas, est toujours une instance de NullPointerException (abrégée NPE). Voir par exemple le code suivant :\nString username = null; System.out.println(String.valueOf(username.length));  La ligne 2 lève une exception, car username est null, on ne peut donc pas accéder à username.length. Une meilleure façon de faire serait :\nString username = null; if (username != null) { System.out.println(String.valueOf(username.length)); }  Le problème est qu\u0026rsquo;il faut se souvenir de toujours vérifier que la référence ne soit pas null ! En pratique, les développeurs oublient souvent. De plus, la situation se complexifie lorsqu\u0026rsquo;on utilise des bibliothèques tierces (on ne sait pas très bien si le retour d\u0026rsquo;une méthode peut renvoyer null ou pas\u0026hellip;).\n La personne ayant \u0026ldquo;inventé\u0026rdquo; le concept de null affirme aujourd\u0026rsquo;hui qu\u0026rsquo;il s\u0026rsquo;agit d\u0026rsquo;une erreur, qu\u0026rsquo;il a nommé \u0026ldquo;The Billion Dollar Mistake\u0026rdquo; (l\u0026rsquo;erreur à un milliard de dollars) ! Ce milliard aurait été perdu par le nombre de plantages produits par un oubli de null-check dans des applications industrielles. Je vous recommande de voir sa présentation (ou de lire ses notes) à ce sujet : https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/   Un (rapide) aparté sur le problème de l\u0026rsquo;égalité On retrouve beaucoup de NPE à l\u0026rsquo;intérieur des tests d\u0026rsquo;égalité. En effet, en Java, l\u0026rsquo;opérateur == ne compare que l\u0026rsquo;égalité des références et on lui préfère donc la méthode equals. Or, equals étant une méthode, il arrive (très souvent) qu\u0026rsquo;on essaie de l\u0026rsquo;appliquer à une référence null ! Voir le code suivant pour un exemple :\nString username = null; if (username.equals(\u0026quot;Smith\u0026quot;) { System.out.println(\u0026quot;Welcome home\u0026quot;); }  Comme précédemment, la ligne 2 provoque une NPE, car username est null, je ne peux donc pas appeler la méthode equals dessus.\nUne façon très simple de corriger le problème, dans ce cas, est d\u0026rsquo;inverser l\u0026rsquo;ordre des variables :\nString username = null; if (\u0026quot;Smith\u0026quot;.equals(username)) { System.out.println(\u0026quot;Welcome home\u0026quot;); }  Ici, pas de problème, car \u0026quot;Smith\u0026quot; n\u0026rsquo;est pas null, et j\u0026rsquo;ai donc tout à fait le droit d\u0026rsquo;appeler la méthode equals dessus. En revanche, la méthode equals de la classe String doit effectuer un null-check sur l\u0026rsquo;argument qu\u0026rsquo;elle reçoit (fort heureusement pour nous, elle le fait).\n À retenir ! Quand on crée une nouvelle classe et que l\u0026rsquo;on surcharge la méthode equals, il faut penser au null-check !   Cette technique ne fonctionne que dans le cas où l\u0026rsquo;un des deux objets est un littéral (c\u0026rsquo;est-à-dire, pour simplifier, qu\u0026rsquo;il a une valeur immédiate, à l\u0026rsquo;inverse d\u0026rsquo;une variable qui peut avoir une valeur ou non). Ici, \u0026quot;Smith\u0026quot; est un littéral. En revanche, si je veux comparer String user1 et String user2, je n\u0026rsquo;ai pas de littéral.\nHeureusement, cette situation est si fréquente que le langage Java nous propose une méthode toute prête : Objects.equals(Object a, Object b) ( voir la doc)). La classe Objects consiste en un ensemble de méthodes \u0026ldquo;utilitaires\u0026rdquo; telle que celle-ci. Objects.equals est statique et il suffit donc de l\u0026rsquo;appeler sur 2 objets pour savoir s\u0026rsquo;ils sont égaux. En interne, elle vérifiera si les objets sont nulls, comparables, et appellera éventuellement la méthode equals de la bonne classe. Par exemple :\nString user1 = null, user2 = null if (Objects.equals(user1, user2)) { System.out.println(\u0026quot;Equals!\u0026quot;); }   À retenir ! Favorisez l\u0026rsquo;utilisation de Objects.equals(a, b) dans votre code aussi souvent que possible.   Une solution plus élégante : les Optional Comme je l\u0026rsquo;ai dit précédemment, le problème principal est qu\u0026rsquo;il faut se souvenir de toujours faire un null-check. Or, on ne s\u0026rsquo;en souvient pas toujours ; parfois, on utilise une bibliothèque tierce (par exemple pour faire une application communiquant en réseau) qui, lors des tests, nous renvoie toujours un objet non-null, sauf un jour, en production, dans un contexte particulier où notre application reçoit un objet null et crashe complètement\u0026hellip;\nDepuis sa version 8, le langage Java propose une classe qui a pour but de supprimer le problème du null : la classe Optional\u0026lt;T\u0026gt; (que j\u0026rsquo;appellerais Optional pour faire plus simple ; voir la doc).\nOptional est une classe générique qui peut contenir, ou non, une valeur (de type T) ; elle propose également des méthodes permettant de simplifier sa manipulation, en particulier de vérifier qu\u0026rsquo;une valeur soit présente (isPresent), de fournir une valeur par défaut (orElse), de récupérer la valeur (get), etc.\nUn exemple simple Voir le code ci-dessous pour un exemple simple :\nString username = null; Optional\u0026lt;String\u0026gt; optString = Optional.ofNullable(username); if (optString.isPresent()) { System.out.println(String.valueOf(optString.get().length)); }  Comme vous pouvez le voir, l\u0026rsquo;utilisation des Optional ressemble fortement à celle des références \u0026ldquo;simples\u0026rdquo; : on utilise un null-check (ici, isPresent au lieu de != null), puis on manipule la valeur (ici, on rajoute get). L\u0026rsquo;avantage est que l\u0026rsquo;utilisation d\u0026rsquo;une classe spécifique, Optional, permet aux développeurs de se dire\n Ah, cette valeur peut être null ! Je dois d\u0026rsquo;abord vérifier si elle est présente.\n Le cas des retours de méthode La classe Optional révèle toute son utilité en tout que retour de méthode. En effet, à l\u0026rsquo;intérieur du corps d\u0026rsquo;une même méthode, nous savons (normalement) quelle variable peut être null ou non, l\u0026rsquo;utilité est donc limitée. En revanche, lorsqu\u0026rsquo;on reçoit un objet d\u0026rsquo;une autre méthode (potentiellement une méthode provenant d\u0026rsquo;une bibliothèque tierce), difficile de savoir si l\u0026rsquo;objet peut être null ou s\u0026rsquo;il est garanti d\u0026rsquo;être non-null. Renvoyer un Optional\u0026lt;T\u0026gt; plutôt qu\u0026rsquo;un T permet d\u0026rsquo;indiquer au développeur qui utilisera votre méthode que oui, il peut ne pas y avoir de valeur, et oui, il faut faire un null-check.\nImaginons que l\u0026rsquo;on conçoive une méthode pour authentifier un utilisateur :\npublic class User { ... } public Optional\u0026lt;User\u0026gt; authenticate(String username, String password) { if (Objects.equals(username, \u0026quot;Smith\u0026quot;) \u0026amp;\u0026amp; Objects.equals(password, \u0026quot;supersecret\u0026quot;)) { User u = new User(); return Optional.of(u); } else { return Optional.empty(); } } public void receiveRequest(String username, String password) { Optional\u0026lt;User\u0026gt; user = authenticate(username, password); if (user.isPresent()) { user.get().sendTopSecretPlans(); } else { System.out.println(\u0026quot;Bad credentials! Intruder alert!\u0026quot;); } }   La classe Optional permet également une approche plus \u0026ldquo;fonctionnelle\u0026rdquo;, avec par exemple les méthodes map, ifPresent, orElseGet qui prennent en paramètre des Function, Consumer ou Supplier (c\u0026rsquo;est-à-dire des méthodes ou des lambda-expressions). Il s\u0026rsquo;agit là de concepts plus avancés qui ne seront pas abordés dans le cadre de ce cours.   Il existe toutefois un piège si vous ne respectez pas une règle implicite\u0026hellip; ne jamais renvoyer null lorsque le type est Optional\u0026lt;T\u0026gt; ! Cela supprimerait complètement les avantages de la classe Optional et pousserait la quasi-totalité des applications/bibliothèques à crasher (celles-ci s\u0026rsquo;attendant à pouvoir appeler Optional::isPresent). Lorsqu\u0026rsquo;on ne veut pas renvoyer de valeur, il faut utiliser Optional.empty(). Un IDE intelligent devrait vous indiquer que vous prenez des risques si vous essayez de renvoyer un null à la place d\u0026rsquo;un Optional.empty().\nRésumé Nous avons vu que chaque référence en Java peut valoir null ; si on ne vérifie pas à chaque fois que la référence n\u0026rsquo;est pas null, on risque de se prendre une NullPointerException (NPE). Celle-ci, si elle n\u0026rsquo;est pas \u0026ldquo;attrapée\u0026rdquo;, peut faire crasher notre application.\nNous avons également vu que ce problème était particulièrement présent lorsque l\u0026rsquo;on souhaite tester l\u0026rsquo;égalité de deux objets ; dans ce cas, la méthode statique Objects.equals(a, b) peut nous aider.\nÀ partir de Java 8, l\u0026rsquo;on peut utiliser la classe Optional\u0026lt;T\u0026gt; pour se simplifier la vie : on s\u0026rsquo;interdit de renvoyer null et on remplace cela par Optional.empty(). On se force également à utiliser Optional.isPresent() pour vérifier la présence (ou non) d\u0026rsquo;une valeur, et dans le cas où elle est présente, on la récupère via Optional.get().\nL\u0026rsquo;utilisation de la classe Optional permet d\u0026rsquo;envoyer un message (implicite) au développeur qui utiliserait votre code : le retour de cette méthode peut ne pas avoir de valeur ! Ainsi, lorsque votre méthode renvoie forcément une valeur non-null, il n\u0026rsquo;est pas nécessaire d\u0026rsquo;utiliser Optional.\n","date":1597968000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1597968000,"objectID":"4972058fa150f5b9406507105dc7fcc4","permalink":"/teaching/poo/02_null/","publishdate":"2020-08-21T00:00:00Z","relpermalink":"/teaching/poo/02_null/","section":"teaching","summary":"Ce document explique le problème du null en Java ainsi que quelques solutions pour pallier à ce problème, telle que l\u0026rsquo;utilisation des Optional.\nNull et les NullPointerException En langage Java, toute référence (des variables, des attributs de classe, des paramètres de méthode) de type objet (donc une classe) peut valoir null : Cette valeur spéciale signifie qu\u0026rsquo;il n\u0026rsquo;y a pas de valeur (c\u0026rsquo;est l\u0026rsquo;équivalent du pointeur nul ou 0 en langage C / C++).","tags":null,"title":"Le problème du null et les Optional","type":"docs"},{"authors":["Remy Chaput"],"categories":[],"content":" Py3status Random Wallpaper is a module for Py3status (which is itself a replacement for the defaul i3status in i3bar) that allows you to change your wallpaper. Each time the module is loaded (for example, when the i3bar is started), it will pick a random wallpaper amongst your library. You can also directly click on the module to change the wallpaper.\nThis module was made with high configurability in mind, and you can tweak several parameters, such as:\n the folders which will be scanned for wallpapers the buttons used to trigger a new change the command used to set the wallpaper (by default, uses feh) an optional list of ignored files and others\u0026hellip;  ","date":1596571562,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596571562,"objectID":"1df52b1e7e9d16964692e95b7a5ecb0d","permalink":"/project/py3status-wallpaper/","publishdate":"2020-08-04T22:06:02+02:00","relpermalink":"/project/py3status-wallpaper/","section":"project","summary":"py3status-random-wallpaper is a module for the Py3status bar, that allows you to easily change your wallpaper on GNU/Linux.","tags":["Python3","OpenSource","GNU+Linux"],"title":"Py3status Random Wallpaper","type":"project"},{"authors":["Remy Chaput"],"categories":[],"content":" XDG-Prefs is an Open-Source tool to manage your default applications on GNU/Linux, with a simple but efficient GUI.\nOn GNU/Linux systems, each file has a type, named the MIME Type (or Media Type), based on the XDG Specifications by Freedesktop. Your system maintains a database that specifies the default application you want to use for each MIME Type ; this database is available through the official xdg-mime tool, but the command-line interface is not suited for easy management (you must remember the exact name of the MIME Type for example).\n XDG-Prefs offers a simple GUI that allows you to view and modify this database easily ; it is built upon the same standard specifications, meaning that your preferences will be recognized by all other applications (typically, when you double-click on a file in your File Explorer).\nSuch a tool is commonly found in Desktop Environments, such as Gnome or KDE, but not in Window Managers, such as i3wm. XDG-Prefs is desktop-agnostic, meaning that you can use it on Gnome, KDE, or even i3.\n","date":1596569806,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1596569806,"objectID":"2767666a5b0d668c4fc7579864a0493d","permalink":"/project/xdgprefs/","publishdate":"2020-08-04T21:36:46+02:00","relpermalink":"/project/xdgprefs/","section":"project","summary":"XDG-Prefs is an open-source tool to manage your default applications on GNU/Linux.","tags":["Python3","OpenSource","GNU+Linux"],"title":"XDG-Prefs","type":"project"},{"authors":["Rémy Chaput","Olivier Boissier","Mathieu Guillermin","Salima Hassas"],"categories":null,"content":"","date":1593388800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1593388800,"objectID":"7425c00e65a551dd63ccfca0ba1da4d4","permalink":"/publication/jfsma20/","publishdate":"2020-06-29T00:00:00Z","relpermalink":"/publication/jfsma20/","section":"publication","summary":"Paper on adaptive learning of ethical behaviors I presented at JFSMA (French Days of Multi-Agent Systems).\n","tags":["Éthique","Apprentissage par renforcement","Systèmes Multi-Agent","Répartition de l'énergie"],"title":"Apprentissage adaptatif de comportements éthiques","type":"publication"},{"authors":[],"categories":[],"content":"  IA² is an Autumn school about Artificial Intelligence, organized by the GDR IA and financed by the CNRS. This 2019 edition of IA² was specialized on Smart Environment and Smart Cities, during which I presented a poster about my internship work on ethical behaviors of artificial agents and the application to intelligent distribution of energy inside a small Smart Grid.\nThe poster is in French\n","date":1569880800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1569880800,"objectID":"eed3d2e91b786ddc46052f7db6a8b936","permalink":"/publication/poster_gdria2019/","publishdate":"2019-10-01T00:00:00+02:00","relpermalink":"/publication/poster_gdria2019/","section":"publication","summary":"Poster about my Master thesis, at an AI Autumn school.","tags":["Ethics","Multi-Agent Systems","Reinforcement Learning","Self-Organizing Maps","Smart Grids"],"title":"Poster at GDR IA 2019","type":"publication"},{"authors":[],"categories":[],"content":" This is the thesis I redacted at the end of my Master in Artificial Intelligence. The subject was Evolutive learning of ethical behaviors, realized at the LIRIS lab, under the supervision of Professor Salima Hassas and Professor Olivier Boissier.\nThe documents (thesis and slides) are in French, but the English abstract is available.\n","date":1559347200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1559347200,"objectID":"3a9afb08e7d0d94f6bb3e8fb2337a5ad","permalink":"/publication/master_thesis/","publishdate":"2019-06-01T00:00:00+02:00","relpermalink":"/publication/master_thesis/","section":"publication","summary":"Master’s thesis on *Evolutive learning of ethical behaviors*, realized at the LIRIS lab, under the supervision of  Professor Salima Hassas (LIRIS) and Professor Olivier Boissier (LaHC).\n","tags":["Ethics","Multi-Agent Systems","Reinforcement Learning","Self-Organizing Maps","Smart Grids"],"title":"Master Research Internship (Thesis)","type":"publication"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":-62135596800,"objectID":"aa33042543f9be1425c7a5f568cde8f5","permalink":"/aboutme/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/aboutme/","section":"","summary":"","tags":null,"title":"About Me","type":"widget_page"}]