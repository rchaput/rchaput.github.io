<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Remy Chaput</title><link>/</link><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><description>Remy Chaput</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Mon, 20 Feb 2023 16:00:00 +0000</lastBuildDate><image><url>/media/icon_hu62f16b166d299cea1530d18dc13c60c6_452_512x512_fill_lanczos_center_2.png</url><title>Remy Chaput</title><link>/</link></image><item><title>Installer Java avec SDKMAN</title><link>/poo/01_sdkman/</link><pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate><guid>/poo/01_sdkman/</guid><description>&lt;p>Ce document explique comment installer un environnement de développement Java, grâce à l&amp;rsquo;utilitaire SDKMAN.
Cela sera utile aux étudiants qui s&amp;rsquo;intéressent au développement d&amp;rsquo;applications Java (au-delà du cadre du cours de POO).&lt;/p>
&lt;p>SDKMAN est facile à installer sur Linux et Mac OSX, mais sur Windows il nécessite d&amp;rsquo;utiliser WSL ou Cygwin.&lt;/p>
&lt;p>L&amp;rsquo;autre option est une installation &amp;ldquo;traditionnelle&amp;rdquo; en passant par le gestionnaire de paquets
(&lt;code>apt&lt;/code>, &lt;code>pacman&lt;/code>, &lt;code>rpm&lt;/code>, etc.) et sera suffisante dans le cadre de ce cours, mais n&amp;rsquo;est pas recommandée
(voir la section &amp;ldquo;Qu&amp;rsquo;est-ce que SDKMAN ?&amp;quot;).&lt;/p>
&lt;h2 id="quest-ce-que-sdkman-">Qu&amp;rsquo;est-ce que SDKMAN ?&lt;/h2>
&lt;p>SDKMAN est un outil conçu pour faciliter l&amp;rsquo;installation d&amp;rsquo;une ou plusieurs versions de Java sous Linux. Il est
particulièrement utile lorsque l&amp;rsquo;on a besoin de conserver sur son ordinateur différentes versions de Java (par exemple,
un projet peut avoir besoin du &lt;em>JDK8&lt;/em> tandis qu&amp;rsquo;un autre utilisera le &lt;em>JDK13&lt;/em>).&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
&lt;p>&lt;em>JDK8&lt;/em> fait référence au &lt;em>Java Development Kit&lt;/em> (c&amp;rsquo;est-à-dire l&amp;rsquo;ensemble des fichiers nécessaires pour exécuter et
développer une application en langage Java), précisément avec la version 8. À ce jour, les versions de Java disponibles
sont numerotées de 6 a 16.&lt;/p>
&lt;p>Remarque : les anciennes versions de Java étaient versionnées selon le format &lt;code>1.x&lt;/code> (par exemple, &lt;code>1.6&lt;/code>).
&lt;code>1.6&lt;/code> est donc équivalent à &lt;code>JDK6&lt;/code>. Ce format a été abandonné depuis longtemps et il vaut mieux utiliser &lt;code>JDKx&lt;/code>.&lt;/p>
&lt;/div>
&lt;/div>
&lt;p>En résumé, SDKMAN permet de disposer de plusieurs versions du JDK (8, 9, 12, 13, &amp;hellip;), tandis que l&amp;rsquo;installation par
le gestionnaire de paquets ne permet d&amp;rsquo;installer qu&amp;rsquo;une seule version (tous les paquets sont mutuellement en conflit).&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
SDKMAN permet également de télécharger des outils qui font partie de l&amp;rsquo;écosystème Java (par exemple Maven ou Gradle),
ainsi que des environnements de développement pour les langages dits &amp;ldquo;de la JVM&amp;rdquo; (Scala, Ceylon, Kotlin, etc.),
c&amp;rsquo;est-à-dire qui utilisent la &lt;em>Java Virtual Machine&lt;/em>, et sont donc plus ou moins liés à Java.
L&amp;rsquo;écosystème Java ne sera pas abordé durant ce cours, mais est en vogue dans le monde de l&amp;rsquo;entreprise, il est donc
bon pour vous de pouvoir télécharger les outils facilement !
&lt;/div>
&lt;/div>
&lt;h2 id="installation-de-sdkman">Installation de SDKMAN&lt;/h2>
&lt;p>Les instructions pour l&amp;rsquo;installer de SDKMAN se trouvent sur le site officielle, à la page suivante :
&lt;a href="https://sdkman.io/install">https://sdkman.io/install&lt;/a>.&lt;/p>
&lt;p>Un résumé simplifié de ces instructions :&lt;/p>
&lt;pre>&lt;code class="language-shell">Télécharger le script d'installation et l'exécuter immédiatement
$ curl -s &amp;quot;https://get.sdkman.io&amp;quot; | bash
Une fois l'installation terminée, lancer le script d'initialisation
$ source &amp;quot;${HOME}/.sdkman/bin/sdkman-init.sh&amp;quot;
Vous avez maintenant accès à sdkman ! Vérifions que cela fonctionne
$ sdk version
&lt;/code>&lt;/pre>
&lt;p>Ces étapes ne sont à effectuer qu&amp;rsquo;une seule fois (pour installer SDKMAN sur votre machine). Vous avez maintenant
accès à SDKMAN via la commande &lt;code>sdk&lt;/code>. &lt;code>sdk help&lt;/code> affichera la liste des sous-commandes disponibles.&lt;/p>
&lt;h2 id="installation-de-java">Installation de Java&lt;/h2>
&lt;p>Utilisez &lt;code>sdk list java&lt;/code> pour afficher l&amp;rsquo;ensemble des versions de Java qui peuvent être téléchargées.
Voici ce que cela donne sur ma machine (affichage tronqué) :&lt;/p>
&lt;pre>&lt;code class="language-shell">$ sdk list java
================================================================================
Available Java Versions
================================================================================
Vendor | Use | Version | Dist | Status | Identifier
--------------------------------------------------------------------------------
AdoptOpenJDK | | 14.0.2.j9 | adpt | | 14.0.2.j9-adpt
| | 14.0.2.hs | adpt | | 14.0.2.hs-adpt
(...)
BellSoft | | 14.0.2.fx | librca | | 14.0.2.fx-librca
| | 14.0.2 | librca | | 14.0.2-librca
| | 13.0.2.fx | librca | | 13.0.2.fx-librca
(...)
Java.net | | 16.ea.8 | open | | 16.ea.8-open
| | 15.ea.34 | open | | 15.ea.34-open
| | 14.0.2 | open | | 14.0.2-open
(...)
&lt;/code>&lt;/pre>
&lt;p>Il existe de &lt;em>nombreux&lt;/em> &amp;ldquo;candidats&amp;rdquo; (dans le langage de SDKMAN) pour Java ; ils se répartissent selon le &lt;em>distributeur&lt;/em>
(&lt;em>Vendor&lt;/em>) et la &lt;em>version&lt;/em>.&lt;/p>
&lt;h3 id="quel-vendor-choisir-">Quel &lt;em>Vendor&lt;/em> choisir ?&lt;/h3>
&lt;p>Il existe plusieurs implémentations du JDK (voir &lt;a href="https://sdkman.io/jdks">https://sdkman.io/jdks&lt;/a> pour leurs différences) ; j&amp;rsquo;en recommande
deux en particulier :&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Java.net&lt;/strong> est l&amp;rsquo;implémentation officielle du JDK ;&lt;/li>
&lt;li>&lt;strong>Bellsoft&lt;/strong> (Liberica) est issue d&amp;rsquo;une initiative 100% Open-Source et qui a la bonne idée d&amp;rsquo;intégrer JavaFX (une
bibliothèque graphique pour concevoir des applications avec &lt;em>GUI&lt;/em>). Sans cela, il faut installer JavaFX à part.&lt;/li>
&lt;/ul>
&lt;h3 id="quelle-version-choisir-">Quelle &lt;em>Version&lt;/em> choisir ?&lt;/h3>
&lt;p>De manière générale, il est préférable d&amp;rsquo;utiliser une version récente pour tout outil, bibliothèque, etc.
Attention toutefois, les versions 15 et 16 sont (au moment de la rédaction) en &lt;em>Early Access&lt;/em>, c&amp;rsquo;est-à-dire que le
standard n&amp;rsquo;est pas fixé et est susceptible de changer (il n&amp;rsquo;est pas stable).&lt;/p>
&lt;p>Je conseille donc de choisir le JDK13 ou 14.&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
le JDK9 a introduit un changement majeur (les modules) qui font que beaucoup d&amp;rsquo;applications conçues avec Java 8
(ou inférieur) ne fonctionnent plus sous Java 9 ! Je recommande donc d&amp;rsquo;installer également un JDK8, cela vous sera
utile pour certains &amp;ldquo;vieux&amp;rdquo; programmes. L&amp;rsquo;avantage de SDKMAN est que vous pouvez définir le JDK13 en version par
défaut, et utiliser avec &lt;code>sdk use&lt;/code> le JDK8 quand vous en aurez besoin.
&lt;/div>
&lt;/div>
&lt;h3 id="résumé--quel-candidat-choisir-">Résumé : quel candidat choisir ?&lt;/h3>
&lt;p>Je choisis d&amp;rsquo;installer le JDK13, avec JavaFX intégré ; le candidat correspondant (selon le tableau) est donc
&lt;code>13.0.2.fx-librca&lt;/code> (notez le &lt;code>13&lt;/code> en début, le &lt;code>.fx&lt;/code> qui indique JavaFX et &lt;code>-librca&lt;/code> pour l&amp;rsquo;implémentation de Bellsoft).
La commande pour installer ce candidat est &lt;code>sdk install java 13.0.2.fx-librca&lt;/code>.&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
&lt;p>S&amp;rsquo;il s&amp;rsquo;agit de votre premier JDK installé, SDKMAN le définit comme JDK par défaut (c&amp;rsquo;est-à-dire que les variables
d&amp;rsquo;environnement &lt;code>JAVA_HOME&lt;/code> et &lt;code>PATH&lt;/code> pointent sur le dossier de ce JDK). Toutes les applications Java utiliseront
ce JDK (à moins que vous n&amp;rsquo;indiquiez manuellement un autre JDK). De plus, la commande &lt;code>java&lt;/code> (ainsi que &lt;code>javac&lt;/code>, etc.)
seront celles fournies par ce JDK.&lt;/p>
&lt;p>En revanche, si vous téléchargez plus d&amp;rsquo;un JDK, SDKMAN vous demandera si vous souhaitez le mettre en JDK par défaut. Je
vous conseille de garder le JDK13 en version par défaut (il est suffisamment récent pour faire tourner la majorité
des programmes).&lt;/p>
&lt;/div>
&lt;/div>
&lt;h3 id="où-est-mon-jdk-">Où est mon JDK ?&lt;/h3>
&lt;p>Il peut vous être nécessaire de connaître l&amp;rsquo;emplacement où est installé le JDK, notamment lors du paramétrage de votre
&lt;em>IDE&lt;/em> (car celui-ci vous demandera très certainement d&amp;rsquo;indiquer quel JDK utiliser).&lt;/p>
&lt;p>Heureusement, SDKMAN rend cela très facile (plus que de dézipper une archive et d&amp;rsquo;oublier dans quel dossier) : tout
est situé dans le dossier &lt;code>${HOME}/.sdkman&lt;/code> (c&amp;rsquo;est-à-dire le dossier caché &lt;code>.sdkman&lt;/code> dans votre répertoire personnel).
En particulier, les candidats sont installés dans &lt;code>${HOME}/.sdkman/candidates/&lt;/code>. Votre version par défaut du JDK se
trouve donc à l&amp;rsquo;emplacement suivant : &lt;code>${HOME}/.sdkman/candidates/java/current/bin&lt;/code>.&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
La commande &lt;code>which java&lt;/code> permet de connaître l&amp;rsquo;emplacement de l&amp;rsquo;exécutable &lt;code>java&lt;/code> ; elle devrait retourner le même
chemin (cela montre que votre JDK est bien configuré).
&lt;/div>
&lt;/div>
&lt;h2 id="paramétrage-de-lide">Paramétrage de l'&lt;em>IDE&lt;/em>&lt;/h2>
&lt;h3 id="avec-intellij-idea">Avec IntelliJ IDEA&lt;/h3>
&lt;p>Lors de la création d&amp;rsquo;un projet, IntelliJ demande quel SDK utiliser ; en déroulant la liste, sélectionner &lt;em>Add JDK&amp;hellip;&lt;/em>.&lt;/p>
&lt;p>Sinon, cliquer sur &lt;em>File&lt;/em> &amp;gt; &lt;em>Project Structure&lt;/em> (ou &lt;em>Ctrl+Alt+Shift+S&lt;/em>), puis dans l&amp;rsquo;onglet &lt;em>SDKs&lt;/em> cliquer sur
l&amp;rsquo;icône &lt;em>+&lt;/em>, &lt;em>Add JDK&amp;hellip;&lt;/em>.&lt;/p></description></item><item><title>Le problème du null et les Optional</title><link>/poo/02_null/</link><pubDate>Fri, 21 Aug 2020 00:00:00 +0000</pubDate><guid>/poo/02_null/</guid><description>&lt;p>Ce document explique le problème du &lt;code>null&lt;/code> en Java ainsi que quelques solutions pour pallier à ce problème, telle que
l&amp;rsquo;utilisation des &lt;code>Optional&lt;/code>.&lt;/p>
&lt;h2 id="null-et-les-nullpointerexception">Null et les NullPointerException&lt;/h2>
&lt;p>En langage Java, toute référence (des variables, des attributs de classe, des paramètres de méthode) de type objet
(donc une classe) peut valoir &lt;code>null&lt;/code> : Cette valeur spéciale signifie qu&amp;rsquo;il n&amp;rsquo;y a pas de valeur (c&amp;rsquo;est l&amp;rsquo;équivalent du
pointeur nul ou 0 en langage C / C++).&lt;/p>
&lt;p>Si vous essayez d&amp;rsquo;accéder quand même à cette référence (par appel de méthode dessus, ou en accédant à un attribut de
la classe), Java ne pourra pas effectuer ce qui est demandé (car l&amp;rsquo;objet n&amp;rsquo;existe pas !) et vous enverra une erreur
(ce qu&amp;rsquo;on appelle &amp;ldquo;lever une exception&amp;rdquo;). Cette exception, dans ce cas, est toujours une instance de
&lt;code>NullPointerException&lt;/code> (abrégée &lt;code>NPE&lt;/code>).
Voir par exemple le code suivant :&lt;/p>
&lt;pre>&lt;code class="language-java">String username = null;
System.out.println(String.valueOf(username.length));
&lt;/code>&lt;/pre>
&lt;p>La ligne 2 lève une exception, car &lt;code>username&lt;/code> est &lt;code>null&lt;/code>, on ne peut donc pas accéder à &lt;code>username.length&lt;/code>.
Une meilleure façon de faire serait :&lt;/p>
&lt;pre>&lt;code class="language-java">String username = null;
if (username != null) {
System.out.println(String.valueOf(username.length));
}
&lt;/code>&lt;/pre>
&lt;p>Le problème est qu&amp;rsquo;il faut se souvenir de &lt;strong>toujours&lt;/strong> vérifier que la référence ne soit pas &lt;code>null&lt;/code> ! En pratique,
les développeurs oublient souvent. De plus, la situation se complexifie lorsqu&amp;rsquo;on utilise des bibliothèques tierces
(on ne sait pas très bien si le retour d&amp;rsquo;une méthode peut renvoyer &lt;code>null&lt;/code> ou pas&amp;hellip;).&lt;/p>
&lt;div class="alert alert-note">
&lt;div>
La personne ayant &amp;ldquo;inventé&amp;rdquo; le concept de &lt;code>null&lt;/code> affirme aujourd&amp;rsquo;hui qu&amp;rsquo;il s&amp;rsquo;agit d&amp;rsquo;une erreur, qu&amp;rsquo;il a nommé
&amp;ldquo;The Billion Dollar Mistake&amp;rdquo; (l&amp;rsquo;erreur à un milliard de dollars) !
Ce milliard aurait été perdu par le nombre de plantages produits par un oubli de &lt;code>null-check&lt;/code> dans des applications
industrielles.
Je vous recommande de voir sa présentation (ou de lire ses notes) à ce sujet :
&lt;a href="https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/">https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare/&lt;/a>
&lt;/div>
&lt;/div>
&lt;h2 id="un-rapide-aparté-sur-le-problème-de-légalité">Un (rapide) aparté sur le problème de l&amp;rsquo;égalité&lt;/h2>
&lt;p>On retrouve beaucoup de &lt;em>NPE&lt;/em> à l&amp;rsquo;intérieur des tests d&amp;rsquo;égalité. En effet, en Java, l&amp;rsquo;opérateur &lt;code>==&lt;/code> ne compare que
l&amp;rsquo;égalité des références et on lui préfère donc la méthode &lt;code>equals&lt;/code>. Or, &lt;code>equals&lt;/code> étant une méthode, il arrive
(très souvent) qu&amp;rsquo;on essaie de l&amp;rsquo;appliquer à une référence &lt;code>null&lt;/code> !
Voir le code suivant pour un exemple :&lt;/p>
&lt;pre>&lt;code class="language-java">String username = null;
if (username.equals(&amp;quot;Smith&amp;quot;) {
System.out.println(&amp;quot;Welcome home&amp;quot;);
}
&lt;/code>&lt;/pre>
&lt;p>Comme précédemment, la ligne 2 provoque une &lt;em>NPE&lt;/em>, car &lt;code>username&lt;/code> est &lt;code>null&lt;/code>, je ne peux donc pas appeler la méthode
&lt;code>equals&lt;/code> dessus.&lt;/p>
&lt;p>Une façon très simple de corriger le problème, dans ce cas, est d&amp;rsquo;inverser l&amp;rsquo;ordre des variables :&lt;/p>
&lt;pre>&lt;code class="language-java">String username = null;
if (&amp;quot;Smith&amp;quot;.equals(username)) {
System.out.println(&amp;quot;Welcome home&amp;quot;);
}
&lt;/code>&lt;/pre>
&lt;p>Ici, pas de problème, car &lt;code>&amp;quot;Smith&amp;quot;&lt;/code> n&amp;rsquo;est pas &lt;code>null&lt;/code>, et j&amp;rsquo;ai donc tout à fait le droit d&amp;rsquo;appeler la méthode &lt;code>equals&lt;/code>
dessus. En revanche, la méthode &lt;code>equals&lt;/code> de la classe &lt;code>String&lt;/code> &lt;strong>doit&lt;/strong> effectuer un &lt;code>null-check&lt;/code> sur l&amp;rsquo;argument qu&amp;rsquo;elle
reçoit (fort heureusement pour nous, elle le fait).&lt;/p>
&lt;div class="alert alert-warning">
&lt;div>
&lt;strong>À retenir !&lt;/strong> &lt;br />
Quand on crée une nouvelle classe et que l&amp;rsquo;on surcharge la méthode &lt;code>equals&lt;/code>, il &lt;strong>faut&lt;/strong> penser au &lt;code>null-check&lt;/code> !
&lt;/div>
&lt;/div>
&lt;p>Cette technique ne fonctionne que dans le cas où l&amp;rsquo;un des deux objets est un &lt;em>littéral&lt;/em> (c&amp;rsquo;est-à-dire, pour simplifier,
qu&amp;rsquo;il a une valeur immédiate, à l&amp;rsquo;inverse d&amp;rsquo;une variable qui &lt;em>peut&lt;/em> avoir une valeur ou non). Ici, &lt;code>&amp;quot;Smith&amp;quot;&lt;/code> est un
littéral. En revanche, si je veux comparer &lt;code>String user1&lt;/code> et &lt;code>String user2&lt;/code>, je n&amp;rsquo;ai pas de littéral.&lt;/p>
&lt;p>Heureusement, cette situation est si fréquente que le langage Java nous propose une méthode toute prête :
&lt;code>Objects.equals(Object a, Object b)&lt;/code> (&lt;a href="https://docs.oracle.com/javase/7/docs/api/java/util/Objects.html#equals%28java.lang.Object,%20java.lang.Object" target="_blank" rel="noopener">voir la doc&lt;/a>)).
La classe &lt;code>Objects&lt;/code> consiste en un ensemble de méthodes &amp;ldquo;utilitaires&amp;rdquo; telle que celle-ci. &lt;code>Objects.equals&lt;/code> est statique
et il suffit donc de l&amp;rsquo;appeler sur 2 objets pour savoir s&amp;rsquo;ils sont égaux. En interne, elle vérifiera si les objets
sont &lt;code>null&lt;/code>s, comparables, et appellera éventuellement la méthode &lt;code>equals&lt;/code> de la bonne classe.
Par exemple :&lt;/p>
&lt;pre>&lt;code class="language-java">String user1 = null, user2 = null
if (Objects.equals(user1, user2)) {
System.out.println(&amp;quot;Equals!&amp;quot;);
}
&lt;/code>&lt;/pre>
&lt;div class="alert alert-warning">
&lt;div>
&lt;strong>À retenir !&lt;/strong> &lt;br />
Favorisez l&amp;rsquo;utilisation de &lt;code>Objects.equals(a, b)&lt;/code> dans votre code aussi souvent que possible.
&lt;/div>
&lt;/div>
&lt;h2 id="une-solution-plus-élégante--les-optional">Une solution plus élégante : les Optional&lt;/h2>
&lt;p>Comme je l&amp;rsquo;ai dit précédemment, le problème principal est qu&amp;rsquo;il faut se souvenir de &lt;strong>toujours&lt;/strong> faire un &lt;code>null-check&lt;/code>.
Or, on ne s&amp;rsquo;en souvient pas toujours ; parfois, on utilise une bibliothèque tierce (par exemple pour faire une
application communiquant en réseau) qui, lors des tests, nous renvoie toujours un objet non-&lt;code>null&lt;/code>, sauf un jour, en
production, dans un contexte particulier où notre application reçoit un objet &lt;code>null&lt;/code> et crashe complètement&amp;hellip;&lt;/p>
&lt;p>Depuis sa version 8, le langage Java propose une classe qui a pour but de supprimer le problème du &lt;code>null&lt;/code> : la classe
&lt;code>Optional&amp;lt;T&amp;gt;&lt;/code> (que j&amp;rsquo;appellerais &lt;code>Optional&lt;/code> pour faire plus simple ; &lt;a href="https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html" target="_blank" rel="noopener">voir la doc&lt;/a>).&lt;/p>
&lt;p>&lt;code>Optional&lt;/code> est une classe générique qui peut contenir, ou non, une valeur (de type &lt;code>T&lt;/code>) ; elle propose également des
méthodes permettant de simplifier sa manipulation, en particulier de vérifier qu&amp;rsquo;une valeur soit présente (&lt;code>isPresent&lt;/code>),
de fournir une valeur par défaut (&lt;code>orElse&lt;/code>), de récupérer la valeur (&lt;code>get&lt;/code>), etc.&lt;/p>
&lt;h3 id="un-exemple-simple">Un exemple simple&lt;/h3>
&lt;p>Voir le code ci-dessous pour un exemple simple :&lt;/p>
&lt;pre>&lt;code class="language-java">String username = null;
Optional&amp;lt;String&amp;gt; optString = Optional.ofNullable(username);
if (optString.isPresent()) {
System.out.println(String.valueOf(optString.get().length));
}
&lt;/code>&lt;/pre>
&lt;p>Comme vous pouvez le voir, l&amp;rsquo;utilisation des Optional ressemble fortement à celle des références &amp;ldquo;simples&amp;rdquo; :
on utilise un &lt;code>null-check&lt;/code> (ici, &lt;code>isPresent&lt;/code> au lieu de &lt;code>!= null&lt;/code>), puis on manipule la valeur (ici, on rajoute &lt;code>get&lt;/code>).
L&amp;rsquo;avantage est que l&amp;rsquo;utilisation d&amp;rsquo;une classe spécifique, &lt;code>Optional&lt;/code>, permet aux développeurs de se dire&lt;/p>
&lt;blockquote>
&lt;p>Ah, cette valeur peut être &lt;code>null&lt;/code> ! Je dois d&amp;rsquo;abord vérifier si elle est présente.&lt;/p>
&lt;/blockquote>
&lt;h3 id="le-cas-des-retours-de-méthode">Le cas des retours de méthode&lt;/h3>
&lt;p>La classe &lt;code>Optional&lt;/code> révèle toute son utilité en tout que retour de méthode. En effet, à l&amp;rsquo;intérieur du corps d&amp;rsquo;une
même méthode, nous savons (normalement) quelle variable peut être &lt;code>null&lt;/code> ou non, l&amp;rsquo;utilité est donc limitée. En revanche,
lorsqu&amp;rsquo;on reçoit un objet d&amp;rsquo;une autre méthode (potentiellement une méthode provenant d&amp;rsquo;une bibliothèque tierce),
difficile de savoir si l&amp;rsquo;objet peut être &lt;code>null&lt;/code> ou s&amp;rsquo;il est garanti d&amp;rsquo;être non-&lt;code>null&lt;/code>. Renvoyer un &lt;code>Optional&amp;lt;T&amp;gt;&lt;/code>
plutôt qu&amp;rsquo;un &lt;code>T&lt;/code> permet d&amp;rsquo;indiquer au développeur qui utilisera votre méthode que oui, il peut ne pas y avoir de valeur,
et oui, il faut faire un &lt;code>null-check&lt;/code>.&lt;/p>
&lt;p>Imaginons que l&amp;rsquo;on conçoive une méthode pour authentifier un utilisateur :&lt;/p>
&lt;pre>&lt;code class="language-java">public class User { ... }
public Optional&amp;lt;User&amp;gt; authenticate(String username, String password) {
if (Objects.equals(username, &amp;quot;Smith&amp;quot;) &amp;amp;&amp;amp; Objects.equals(password, &amp;quot;supersecret&amp;quot;)) {
User u = new User();
return Optional.of(u);
} else {
return Optional.empty();
}
}
public void receiveRequest(String username, String password) {
Optional&amp;lt;User&amp;gt; user = authenticate(username, password);
if (user.isPresent()) {
user.get().sendTopSecretPlans();
} else {
System.out.println(&amp;quot;Bad credentials! Intruder alert!&amp;quot;);
}
}
&lt;/code>&lt;/pre>
&lt;div class="alert alert-note">
&lt;div>
La classe &lt;code>Optional&lt;/code> permet également une approche plus &amp;ldquo;fonctionnelle&amp;rdquo;, avec par exemple les méthodes &lt;code>map&lt;/code>,
&lt;code>ifPresent&lt;/code>, &lt;code>orElseGet&lt;/code> qui prennent en paramètre des &lt;code>Function&lt;/code>, &lt;code>Consumer&lt;/code> ou &lt;code>Supplier&lt;/code> (c&amp;rsquo;est-à-dire des méthodes
ou des &lt;code>lambda-expressions&lt;/code>).
Il s&amp;rsquo;agit là de concepts plus avancés qui ne seront pas abordés dans le cadre de ce cours.
&lt;/div>
&lt;/div>
&lt;p>Il existe toutefois un piège si vous ne respectez pas une règle implicite&amp;hellip; ne &lt;strong>jamais&lt;/strong> renvoyer &lt;code>null&lt;/code> lorsque le
type est &lt;code>Optional&amp;lt;T&amp;gt;&lt;/code> ! Cela supprimerait complètement les avantages de la classe &lt;code>Optional&lt;/code> et pousserait la
quasi-totalité des applications/bibliothèques à crasher (celles-ci s&amp;rsquo;attendant à pouvoir appeler &lt;code>Optional::isPresent&lt;/code>).
Lorsqu&amp;rsquo;on ne veut pas renvoyer de valeur, il &lt;strong>faut&lt;/strong> utiliser &lt;code>Optional.empty()&lt;/code>. Un IDE intelligent devrait vous
indiquer que vous prenez des risques si vous essayez de renvoyer un &lt;code>null&lt;/code> à la place d&amp;rsquo;un &lt;code>Optional.empty()&lt;/code>.&lt;/p>
&lt;h2 id="résumé">Résumé&lt;/h2>
&lt;p>Nous avons vu que chaque référence en Java peut valoir &lt;code>null&lt;/code> ; si on ne vérifie pas à chaque fois que la référence n&amp;rsquo;est
pas &lt;code>null&lt;/code>, on risque de se prendre une &lt;code>NullPointerException&lt;/code> (&lt;em>NPE&lt;/em>). Celle-ci, si elle n&amp;rsquo;est pas &amp;ldquo;attrapée&amp;rdquo;, peut
faire crasher notre application.&lt;/p>
&lt;p>Nous avons également vu que ce problème était particulièrement présent lorsque l&amp;rsquo;on souhaite tester l&amp;rsquo;égalité de deux
objets ; dans ce cas, la méthode statique &lt;code>Objects.equals(a, b)&lt;/code> peut nous aider.&lt;/p>
&lt;p>À partir de Java 8, l&amp;rsquo;on peut utiliser la classe &lt;code>Optional&amp;lt;T&amp;gt;&lt;/code> pour se simplifier la vie : on s&amp;rsquo;interdit de renvoyer
&lt;code>null&lt;/code> et on remplace cela par &lt;code>Optional.empty()&lt;/code>. On se force également à utiliser &lt;code>Optional.isPresent()&lt;/code> pour
vérifier la présence (ou non) d&amp;rsquo;une valeur, et dans le cas où elle est présente, on la récupère via &lt;code>Optional.get()&lt;/code>.&lt;/p>
&lt;p>L&amp;rsquo;utilisation de la classe &lt;code>Optional&lt;/code> permet d&amp;rsquo;envoyer un message (implicite) au développeur qui utiliserait votre
code : le retour de cette méthode peut ne pas avoir de valeur ! Ainsi, lorsque votre méthode renvoie &lt;em>forcément&lt;/em> une
valeur non-&lt;code>null&lt;/code>, il n&amp;rsquo;est pas nécessaire d&amp;rsquo;utiliser &lt;code>Optional&lt;/code>.&lt;/p></description></item><item><title>Machine Ethics and Normative Systems -- Towards user in the loop</title><link>/talk/icr-lu-2023/</link><pubDate>Mon, 20 Feb 2023 16:00:00 +0000</pubDate><guid>/talk/icr-lu-2023/</guid><description>&lt;p>A talk that I gave at a seminar of the
&lt;a href="https://icr.uni.lu/" target="_blank" rel="noopener">&lt;em>Individual and Collective Reasoning group&lt;/em> (ICR &amp;ndash; University of Luxembourg)&lt;/a>
remotely.&lt;/p>
&lt;p>&lt;strong>Abstract&lt;/strong>&lt;/p>
&lt;p>Increasingly numerous AI systems have been deployed from labs to our society, with an important impact over human
(daily) lives, especially with respect to ethical considerations. The field of Machine Ethics has proposed several
approaches to embed such considerations within the decision-making mechanisms of artificial agents. In this
presentation, I briefly summarize the state of the art, focusing particularly on normative systems, before presenting
the AJAR framework, which leverages argumentation to judge reinforcement learning agents. Finally, I present an
extension towards putting human users in the loop and settling dilemmas.&lt;/p></description></item><item><title>PhD Thesis</title><link>/publication/phd_thesis/</link><pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate><guid>/publication/phd_thesis/</guid><description>&lt;p>&lt;strong>Learning behaviours aligned with moral values in a multi-agent system: guiding reinforcement learning
with symbolic judgments&lt;/strong>&lt;/p>
&lt;hr>
&lt;p>This is the manuscript and slides of my PhD Thesis in Computer Science, realized at the &lt;a href="https://liris.cnrs.fr" target="_blank" rel="noopener">LIRIS&lt;/a>
lab, under the supervision of Professor &lt;a href="https://liris.cnrs.fr/page-membre/salima-hassas" target="_blank" rel="noopener">Salima Hassas&lt;/a>,
Professor &lt;a href="https://www.emse.fr/~boissier/" target="_blank" rel="noopener">Olivier Boissier&lt;/a>, and Dr.
&lt;a href="https://www.ucly.fr/la-recherche/les-enseignants-chercheurs/enseignants-chercheurs/guillermin-mathieu-249/" target="_blank" rel="noopener">Mathieu Guillermin&lt;/a>.&lt;/p>
&lt;p>The thesis was defended at &lt;a href="">Université Claude Bernard Lyon 1&lt;/a> on 2022-10-27 before the following jury:&lt;/p>
&lt;ul>
&lt;li>Pr. Parisa Ghodous &amp;ndash; Université Claude Bernard Lyon 1 &amp;ndash; &lt;em>President&lt;/em>&lt;/li>
&lt;li>Dr. Grégory Bonnet &amp;ndash; Université de Caen Normandie &amp;ndash; &lt;em>Reviewer&lt;/em>&lt;/li>
&lt;li>Pr. Marija Slavkovik &amp;ndash; University of Bergen &amp;ndash; &lt;em>Reviewer&lt;/em>&lt;/li>
&lt;li>Dr. Alain Dutech &amp;ndash; INRIA Nancy &amp;ndash; &lt;em>Examiner&lt;/em>&lt;/li>
&lt;li>Pr. Juan A. Rodríguez-Aguilar &amp;ndash; Autonomous University of Barcelona &amp;ndash; &lt;em>Examiner&lt;/em>&lt;/li>
&lt;li>Pr. Salima Hassas &amp;ndash; Université Claude Bernard Lyon 1 &amp;ndash; &lt;em>Supervisor&lt;/em>&lt;/li>
&lt;li>Pr. Olivier Boissier &amp;ndash; École des Mines de Saint-Étienne &amp;ndash; &lt;em>Co-supervisor&lt;/em>&lt;/li>
&lt;li>Dr. Mathieu Guillermin &amp;ndash; Université Catholique de Lyon &amp;ndash; &lt;em>Co-supervisor&lt;/em>&lt;/li>
&lt;/ul></description></item><item><title>acronymsdown</title><link>/project/acronymsdown/</link><pubDate>Mon, 20 Dec 2021 00:00:00 +0000</pubDate><guid>/project/acronymsdown/</guid><description>&lt;p>&lt;strong>acronymsdown&lt;/strong> is an open-source &lt;a href="https://pandoc.org/lua-filters.html" target="_blank" rel="noopener">Pandoc filter&lt;/a> shipped in an R package
that allows using acronyms in a &lt;a href="https://rmarkdown.rstudio.com/" target="_blank" rel="noopener">R Markdown&lt;/a> document (Rmd).&lt;/p>
&lt;p>Rmd documents bring a simplified syntax over existing languages, such as
LaTeX or HTML; however, no easy and integrated support for acronyms was
available, as opposed to LaTeX&amp;rsquo;s &lt;a href="https://www.ctan.org/pkg/glossaries" target="_blank" rel="noopener">glossaries&lt;/a> package for example.&lt;/p>
&lt;p>The typical workflow to use acronyms in a Rmd document, without
&lt;strong>acronymsdown&lt;/strong>, would be to write in plain text the full name and its
acronym, such as &lt;code>R Markdown (Rmd)&lt;/code>, the first time the acronym is used, then
only the acronym on subsequent uses, such as &lt;code>Rmd&lt;/code>. This involves remembering
whether the acronym already appeared; if the first occurrence is changed or
moved, the document might not be correct anymore.&lt;/p>
&lt;p>Instead, &lt;strong>acronymsdown&lt;/strong> automates the use of acronyms, by first declaring
them, and then using a special syntax throughout the document. The underlying
filter will automatically replace each occurrence by the correct text,
depending on whether it corresponds to the first use.&lt;/p>
&lt;p>Using an acronym is as simple as writing:&lt;/p>
&lt;pre>&lt;code class="language-md">\acr{Rmd} documents are great!
\acr{Rmd} relies on Pandoc internally.
&lt;/code>&lt;/pre>
&lt;p>Each occurrence of &lt;code>\acr{KEY}&lt;/code> will be replaced, according to a user-configurable
style, such as &lt;code>R Markdown (Rmd)&lt;/code> or &lt;code>Rmd (R Markdown)&lt;/code>. In addition, a List of
Acronym can be automatically generated, based on all defined acronyms.&lt;/p>
&lt;p>See the &lt;a href="https://github.com/rchaput/acronymsdown" target="_blank" rel="noopener">GitHub&lt;/a> page, the
&lt;a href="https://rchaput.github.io/acronymsdown/" target="_blank" rel="noopener">documentation&lt;/a> for more details, or
start using &lt;strong>acronymsdown&lt;/strong> in your Rmd documents right away:&lt;/p>
&lt;pre>&lt;code>```{r setup}
install.packages(&amp;quot;remotes&amp;quot;)
remotes::install_github(&amp;quot;rchaput/acronymsdown&amp;quot;)
```
&lt;/code>&lt;/pre>
&lt;pre>&lt;code class="language-yaml">---
output:
pdf_document:
pandoc_args: !expr acronymsdown::add_filter()
acronyms:
keys:
- shortname: Rmd
longname: R Markdown
---
&lt;/code>&lt;/pre></description></item><item><title>knitrdrawio</title><link>/project/knitrdrawio/</link><pubDate>Fri, 06 Aug 2021 00:00:00 +0000</pubDate><guid>/project/knitrdrawio/</guid><description>&lt;p>&lt;strong>knitrdrawio&lt;/strong> is a publicly-available R package that brings a new engine
to the &lt;a href="https://yihui.org/knitr/" target="_blank" rel="noopener">knitr&lt;/a> library, to automatically include &lt;a href="https://diagrams.net" target="_blank" rel="noopener">draw.io&lt;/a> diagrams in R
Markdown documents (Rmd).&lt;/p>
&lt;p>Rmd documents are powerful documents that increase reproducibility in
research by integrating code chunks which are run when the document is
processed by the &lt;a href="https://yihui.org/knitr/" target="_blank" rel="noopener">knitr&lt;/a> library and exported (e.g., to PDF or HTML webpages).
Typical usages of such code chunks include, for example, the plotting
of figures based on experiments data.&lt;/p>
&lt;p>However, no tool was easily accessible to include diagram images,
especially those created by a third-party software, such as &lt;a href="https://diagrams.net" target="_blank" rel="noopener">draw.io&lt;/a>.&lt;/p>
&lt;p>Before &lt;strong>knitrdrawio&lt;/strong>, the alternative would have been to manually export
the diagram from &lt;a href="https://diagrams.net" target="_blank" rel="noopener">draw.io&lt;/a> as an image (e.g., PNG, JPG, or PDF), and then
to manually include it in the R Markdown document, as one would do with
any Markdown document (&lt;code>[Image name](/path/to/image.png)&lt;/code>).&lt;/p>
&lt;p>This workflow is rather cumbersome and does not support the stakes of
reproducibility, open science and reusability.
Indeed, the export process, and its parameters, are separated from
the rest of the document. One has to remember how to export the diagrams,
from which source files, which are the correct versions, etc.
Moreover, many scientists only include the exported images in their
Version Control System (VCS), which makes it more difficult to modify
the diagram later on (&amp;ldquo;where is that source file?!&amp;quot;).&lt;/p>
&lt;p>&lt;strong>knitrdrawio&lt;/strong> was built to solve this, by extending the &lt;a href="https://yihui.org/knitr/" target="_blank" rel="noopener">knitr&lt;/a> library
with a new chunk &lt;em>engine&lt;/em>, which allows to seamlessly export and include
&lt;a href="https://diagrams.net" target="_blank" rel="noopener">draw.io&lt;/a> diagrams.&lt;/p>
&lt;p>Automatically exporting and including a diagram is as simple as writing:&lt;/p>
&lt;pre>&lt;code>```{drawio my-super-diag1, src=&amp;quot;diag1.drawio&amp;quot;}
```
&lt;/code>&lt;/pre>
&lt;p>This code chunk is replaced by the actual image, automatically exported
from the &lt;code>diag1.drawio&lt;/code> diagram file, during the &lt;em>knitting&lt;/em> process.&lt;/p>
&lt;p>Of course, parameters can be added to control the export process:&lt;/p>
&lt;pre>&lt;code>```{drawio my-super-diag2, src=&amp;quot;diag2.drawio&amp;quot;, border=5, crop=FALSE, page.index=4}
```
&lt;/code>&lt;/pre>
&lt;p>Notice how the parameters are directly written in the document itself:
any people trying to re-create your document (including future you!) will
export the diagram exactly as you intended.&lt;/p>
&lt;p>As a bonus, &lt;strong>knitrdrawio&lt;/strong> builds upon &lt;a href="https://yihui.org/knitr/" target="_blank" rel="noopener">knitr&lt;/a>&amp;rsquo;s caching mechanism
to avoid re-executing chunks if unnecessary. This means that, if
you chose to enable cache, the chunk will be executed only once, as long
as neither the parameters nor the diagram source file are changed.&lt;/p>
&lt;p>See the &lt;a href="https://github.com/rchaput/knitrdrawio" target="_blank" rel="noopener">GitHub&lt;/a> page for more
details, or start using &lt;strong>knitrdrawio&lt;/strong> in your Rmd documents right away:&lt;/p>
&lt;pre>&lt;code>```{r setup}
install.packages(&amp;quot;remotes&amp;quot;)
remotes::install_github(&amp;quot;rchaput/knitrdrawio&amp;quot;)
library(knitrdrawio)
```
&lt;/code>&lt;/pre></description></item><item><title>Approche multi-agent combinant raisonnement et apprentissage pour un comportement éthique</title><link>/publication/jfsma2021/</link><pubDate>Tue, 29 Jun 2021 00:00:00 +0000</pubDate><guid>/publication/jfsma2021/</guid><description/></item><item><title>A Multi-Agent Approach to Combine Reasoning and Learning for an Ethical Behavior</title><link>/publication/aies2021/</link><pubDate>Fri, 21 May 2021 00:00:00 +0000</pubDate><guid>/publication/aies2021/</guid><description/></item><item><title>Explanations: What does it mean for humans, for machines, for man-machines interactions?</title><link>/publication/xai2021/</link><pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate><guid>/publication/xai2021/</guid><description/></item><item><title>Py3status Random Wallpaper</title><link>/project/py3status-wallpaper/</link><pubDate>Tue, 04 Aug 2020 22:06:02 +0200</pubDate><guid>/project/py3status-wallpaper/</guid><description>&lt;p>&lt;a href="https://github.com/rchaput/py3status-random-wallpaper/" title="Pystatus-Random-Wallpaper" target="_blank" rel="noopener">Py3status Random Wallpaper&lt;/a> is a module for &lt;a href="https://github.com/ultrabug/py3status/" target="_blank" rel="noopener">Py3status&lt;/a> (which is itself a replacement for the defaul i3status in i3bar) that allows you to
change your wallpaper. Each time the module is loaded (for example, when the i3bar is started), it will
pick a random wallpaper amongst your library. You can also directly click on the module to change the wallpaper.&lt;/p>
&lt;p>This module was made with high configurability in mind, and you can tweak several parameters, such as:&lt;/p>
&lt;ul>
&lt;li>the folders which will be scanned for wallpapers&lt;/li>
&lt;li>the buttons used to trigger a new change&lt;/li>
&lt;li>the command used to set the wallpaper (by default, uses &lt;a href="https://feh.finalrewind.org/" target="_blank" rel="noopener">feh&lt;/a>)&lt;/li>
&lt;li>an optional list of ignored files&lt;/li>
&lt;li>and others&amp;hellip;&lt;/li>
&lt;/ul></description></item><item><title>XDG-Prefs</title><link>/project/xdgprefs/</link><pubDate>Tue, 04 Aug 2020 21:36:46 +0200</pubDate><guid>/project/xdgprefs/</guid><description>&lt;p>&lt;a href="https://github.com/rchaput/xdg-prefs/" target="_blank" rel="noopener">XDG-Prefs&lt;/a> is an Open-Source tool to manage your default applications on GNU/Linux, with a simple but efficient GUI.&lt;/p>
&lt;p>On GNU/Linux systems, each file has a type, named the &lt;a href="https://www.freedesktop.org/wiki/Specifications/shared-mime-info-spec/" target="_blank" rel="noopener">MIME Type&lt;/a> (or Media Type), based on the
&lt;a href="https://www.freedesktop.org/wiki/Specifications/mime-apps-spec/" target="_blank" rel="noopener">XDG Specifications&lt;/a> by &lt;a href="https://www.freedesktop.org/wiki/" target="_blank" rel="noopener">Freedesktop&lt;/a>. Your system maintains a database that specifies the
default application you want to use for each MIME Type ; this database is available through the official
&lt;code>xdg-mime&lt;/code> tool, but the command-line interface is not suited for easy management (you must remember the
exact name of the MIME Type for example).&lt;/p>
&lt;p>&lt;a href="https://github.com/rchaput/xdg-prefs/" target="_blank" rel="noopener">XDG-Prefs&lt;/a> offers a simple GUI that allows you to view and modify this database easily ; it
is built upon the same standard specifications, meaning that your preferences will be recognized by
all other applications (typically, when you double-click on a file in your File Explorer).&lt;/p>
&lt;p>Such a tool is commonly found in Desktop Environments, such as &lt;em>Gnome&lt;/em> or &lt;em>KDE&lt;/em>, but not in Window Managers,
such as &lt;em>i3wm&lt;/em>. &lt;a href="https://github.com/rchaput/xdg-prefs/" target="_blank" rel="noopener">XDG-Prefs&lt;/a> is desktop-agnostic, meaning that you can use it on Gnome, KDE, or even i3.&lt;/p></description></item><item><title>Apprentissage adaptatif de comportements éthiques</title><link>/publication/jfsma20/</link><pubDate>Mon, 29 Jun 2020 00:00:00 +0000</pubDate><guid>/publication/jfsma20/</guid><description/></item><item><title>Poster at GDR IA 2019</title><link>/publication/poster_gdria2019/</link><pubDate>Tue, 01 Oct 2019 00:00:00 +0200</pubDate><guid>/publication/poster_gdria2019/</guid><description>&lt;hr>
&lt;p>&lt;a href="https://ia2.gdria.fr/" target="_blank" rel="noopener">IA²&lt;/a> is an Autumn school about Artificial Intelligence, organized by the &lt;a href="https://gdria.fr/" target="_blank" rel="noopener">GDR IA&lt;/a> and financed by the &lt;a href="https://cnrs.fr/" target="_blank" rel="noopener">CNRS&lt;/a>.
This 2019 edition of &lt;a href="https://ia2.gdria.fr/" target="_blank" rel="noopener">IA²&lt;/a> was specialized on Smart Environment and Smart Cities, during which I presented a poster
about my internship work on ethical behaviors of artificial agents and the application to intelligent distribution of
energy inside a small Smart Grid.&lt;/p>
&lt;p>The poster is in French&lt;/p></description></item><item><title>Master Research Internship</title><link>/publication/master_thesis/</link><pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate><guid>/publication/master_thesis/</guid><description>&lt;hr>
&lt;p>This is the thesis I redacted at the end of my Master in Artificial Intelligence. The subject was &lt;em>Evolutive learning
of ethical behaviors&lt;/em>, realized at the &lt;a href="https://liris.cnrs.fr" target="_blank" rel="noopener">LIRIS&lt;/a> lab, under the supervision of Professor
&lt;a href="https://liris.cnrs.fr/page-membre/salima-hassas" target="_blank" rel="noopener">Salima Hassas&lt;/a> and
Professor &lt;a href="https://www.emse.fr/~boissier/" target="_blank" rel="noopener">Olivier Boissier&lt;/a>.&lt;/p>
&lt;p>The documents (thesis and slides) are in French, but the English abstract is available.&lt;/p></description></item><item><title>About Me</title><link>/aboutme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/aboutme/</guid><description/></item><item><title>Teaching / Enseignement</title><link>/teaching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/teaching/</guid><description>&lt;p>This page lists the courses I teach at the University. I also include a few
useful materials (in French for students).&lt;/p>
&lt;p>Cette page liste les cours que j&amp;rsquo;enseigne à l&amp;rsquo;Université. J&amp;rsquo;inclus également
des matériaux utiles (en Français pour les étudiants).&lt;/p></description></item></channel></rss>